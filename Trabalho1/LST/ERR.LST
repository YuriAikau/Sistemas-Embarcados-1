     1                                  global invalid_player, double_play, invalid_position, position_filled, match_draw, clear_character
     2                                  extern matriz_tabela
     3                                  extern cursor, caracter
     4                                  extern proximo_jogador
     5                                  extern cor, branco_intenso, amarelo, magenta_claro, cyan_claro
     6                                  
     7                                  segment code
     8                                  ..start:
     9                                  
    10                                  ; função responsável por escrever o erro na tela correspondente ao jogador ser inválido
    11                                  invalid_player:
    12 00000000 9C                          pushf
    13 00000001 50                          push 		ax
    14 00000002 53                          push 		bx
    15 00000003 51                          push		cx
    16 00000004 52                          push		dx
    17 00000005 56                          push		si
    18 00000006 57                          push		di
    19 00000007 55                          push		bp
    20                                  
    21 00000008 B91100                      mov cx, len_jogador_invalido ; número de caracteres na mensagem de erro
    22 0000000B 31DB                        xor bx,bx
    23 0000000D B61B                        mov dh,27
    24 0000000F B216                        mov dl,22
    25 00000011 C706[0000][0000]            mov word[cor], amarelo
    26                                  
    27                                  err_invalid_player:
    28 00000017 E8(0000)                    call	cursor
    29 0000001A 8A87[1E00]                  mov     al,[bx+jogador_invalido]
    30 0000001E E8(0000)                    call	caracter
    31 00000021 43                          inc     bx			;proximo caracter
    32 00000022 FEC2                        inc		dl			;avanca a coluna
    33 00000024 E2F1                        loop    err_invalid_player
    34                                  
    35 00000026 5F                          pop		di
    36 00000027 5E                          pop		si
    37 00000028 5A                          pop		dx
    38 00000029 59                          pop		cx
    39 0000002A 5B                          pop		bx
    40 0000002B 58                          pop		ax
    41 0000002C 9D                          popf
    42 0000002D 5D                          pop		bp
    43 0000002E C3                          ret
    44                                  
    45                                  ; função responsável por escrever o erro na tela correspondente ao jogador tentar jogar 2 vezes seguidas
    46                                  double_play:
    47 0000002F 9C                          pushf
    48 00000030 50                          push 		ax
    49 00000031 53                          push 		bx
    50 00000032 51                          push		cx
    51 00000033 52                          push		dx
    52 00000034 56                          push		si
    53 00000035 57                          push		di
    54 00000036 55                          push		bp
    55                                  
    56 00000037 B91E00                      mov cx, len_jogada_dupla ; número de caracteres na mensagem de erro
    57 0000003A 31DB                        xor bx,bx
    58 0000003C B61B                        mov dh,27
    59 0000003E B216                        mov dl,22
    60 00000040 C706[0000][0000]            mov word[cor], amarelo
    61                                  
    62                                  err_dup_play:
    63 00000046 E8(0000)                    call	cursor
    64 00000049 8A87[0000]                  mov     al,[bx+jogada_dupla]
    65 0000004D E8(0000)                    call	caracter
    66 00000050 43                          inc     bx			;proximo caracter
    67 00000051 FEC2                        inc		dl			;avanca a coluna
    68 00000053 E2F1                        loop    err_dup_play
    69                                  
    70 00000055 813E[0000]5800              cmp word[proximo_jogador],'X'
    71 0000005B 7418                        je red_x
    72 0000005D C706[0000][0000]            mov word[cor], cyan_claro
    73                                  
    74                                  next_player_draw
    75 00000063 E8(0000)                    call	cursor
    76 00000066 A0[0000]                    mov     al,[proximo_jogador]
    77 00000069 E8(0000)                    call	caracter
    78                                  
    79 0000006C 5F                          pop		di
    80 0000006D 5E                          pop		si
    81 0000006E 5A                          pop		dx
    82 0000006F 59                          pop		cx
    83 00000070 5B                          pop		bx
    84 00000071 58                          pop		ax
    85 00000072 9D                          popf
    86 00000073 5D                          pop		bp
    87 00000074 C3                          ret
    88                                  
    89                                  red_x:
    90 00000075 C706[0000][0000]            mov word[cor], magenta_claro
    91 0000007B E9E5FF                      jmp next_player_draw
    92                                  
    93                                  ; função responsável por escrever o erro na tela correspondente à posição na tabela se inválida
    94                                  invalid_position:
    95 0000007E 9C                          pushf
    96 0000007F 50                          push 		ax
    97 00000080 53                          push 		bx
    98 00000081 51                          push		cx
    99 00000082 52                          push		dx
   100 00000083 56                          push		si
   101 00000084 57                          push		di
   102 00000085 55                          push		bp
   103                                  
   104 00000086 B91100                      mov cx, len_posicao_invalida ; número de caracteres na mensagem de erro
   105 00000089 31DB                        xor bx,bx
   106 0000008B B61B                        mov dh,27
   107 0000008D B216                        mov dl,22
   108 0000008F C706[0000][0000]            mov word[cor], amarelo
   109                                  
   110                                  err_invalid_position:
   111 00000095 E8(0000)                    call	cursor
   112 00000098 8A87[2F00]                  mov     al,[bx+posicao_invalida]
   113 0000009C E8(0000)                    call	caracter
   114 0000009F 43                          inc     bx			;proximo caracter
   115 000000A0 FEC2                        inc		dl			;avanca a coluna
   116 000000A2 E2F1                        loop    err_invalid_position
   117                                  
   118 000000A4 5F                          pop		di
   119 000000A5 5E                          pop		si
   120 000000A6 5A                          pop		dx
   121 000000A7 59                          pop		cx
   122 000000A8 5B                          pop		bx
   123 000000A9 58                          pop		ax
   124 000000AA 9D                          popf
   125 000000AB 5D                          pop		bp
   126 000000AC C3                          ret
   127                                  
   128                                  position_filled:
   129 000000AD 9C                          pushf
   130 000000AE 50                          push 		ax
   131 000000AF 53                          push 		bx
   132 000000B0 51                          push		cx
   133 000000B1 52                          push		dx
   134 000000B2 56                          push		si
   135 000000B3 57                          push		di
   136 000000B4 55                          push		bp
   137                                  
   138 000000B5 B91600                      mov cx, len_posicao_preenchida ; número de caracteres na mensagem de erro
   139 000000B8 31DB                        xor bx,bx
   140 000000BA B61B                        mov dh,27
   141 000000BC B216                        mov dl,22
   142 000000BE C706[0000][0000]            mov word[cor], amarelo
   143                                  
   144                                  err_position_filled:
   145 000000C4 E8(0000)                    call	cursor
   146 000000C7 8A87[4000]                  mov     al,[bx+posicao_preenchida]
   147 000000CB E8(0000)                    call	caracter
   148 000000CE 43                          inc     bx			;proximo caracter
   149 000000CF FEC2                        inc		dl			;avanca a coluna
   150 000000D1 E2F1                        loop    err_position_filled
   151                                  
   152 000000D3 5F                          pop		di
   153 000000D4 5E                          pop		si
   154 000000D5 5A                          pop		dx
   155 000000D6 59                          pop		cx
   156 000000D7 5B                          pop		bx
   157 000000D8 58                          pop		ax
   158 000000D9 9D                          popf
   159 000000DA 5D                          pop		bp
   160 000000DB C3                          ret
   161                                  
   162                                  match_draw:
   163 000000DC 9C                          pushf
   164 000000DD 50                          push 		ax
   165 000000DE 53                          push 		bx
   166 000000DF 51                          push		cx
   167 000000E0 52                          push		dx
   168 000000E1 56                          push		si
   169 000000E2 57                          push		di
   170 000000E3 55                          push		bp
   171                                  
   172 000000E4 B90700                      mov cx, len_msg_empate ; número de caracteres na mensagem de empate
   173 000000E7 31DB                        xor bx,bx
   174 000000E9 B61B                        mov dh,27
   175 000000EB B216                        mov dl,22
   176 000000ED C706[0000][0000]            mov word[cor], amarelo
   177                                  
   178                                  match_draw1:
   179 000000F3 E8(0000)                    call	cursor
   180 000000F6 8A87[5600]                  mov     al,[bx+msg_empate]
   181 000000FA E8(0000)                    call	caracter
   182 000000FD 43                          inc     bx			;proximo caracter
   183 000000FE FEC2                        inc		dl			;avanca a coluna
   184 00000100 E2F1                        loop    match_draw1
   185                                  
   186 00000102 5F                          pop		di
   187 00000103 5E                          pop		si
   188 00000104 5A                          pop		dx
   189 00000105 59                          pop		cx
   190 00000106 5B                          pop		bx
   191 00000107 58                          pop		ax
   192 00000108 9D                          popf
   193 00000109 5D                          pop		bp
   194 0000010A C3                          ret
   195                                  
   196                                  ; limpa todos os caracteres de uma linha que não sejam parte do texto da tabela
   197                                  ; push offset_caracteres,push n_caracteres; push altura_linha; call clear_character
   198                                  clear_character:
   199 0000010B 55                          push        bp
   200 0000010C 89E5                        mov         bp,sp
   201 0000010E 9C                          pushf
   202 0000010F 50                          push 		ax
   203 00000110 53                          push 		bx
   204 00000111 51                          push		cx
   205 00000112 52                          push		dx
   206 00000113 56                          push		si
   207 00000114 57                          push		di
   208                                  
   209 00000115 8B4608                      mov ax,[bp+8] ; recupera o número de caracteres "permanentes" da linha
   210                                  
   211 00000118 25FF00                      and ax,00FFh
   212 0000011B 0402                        add al,2
   213 0000011D 88C2                        mov dl,al
   214                                  
   215 0000011F 8B4606                      mov ax,[bp+6] ; recupera o numero de caracteres a serem apagados
   216 00000122 89C1                        mov cx,ax
   217                                  
   218 00000124 8B4604                      mov ax,[bp+4] ; valor correspondente ao número da linha
   219 00000127 25FF00                      and ax,00FFh
   220 0000012A 88C6                        mov dh,al
   221 0000012C C706[0000][0000]            mov word[cor], branco_intenso
   222                                  
   223                                  clearer:
   224 00000132 E8(0000)                    call	cursor
   225 00000135 B020                        mov     al,' '
   226 00000137 E8(0000)                    call	caracter
   227 0000013A FEC2                        inc		dl			;avanca a coluna
   228 0000013C E2F4                        loop    clearer
   229                                  
   230 0000013E 5F                          pop		di
   231 0000013F 5E                          pop		si
   232 00000140 5A                          pop		dx
   233 00000141 59                          pop		cx
   234 00000142 5B                          pop		bx
   235 00000143 58                          pop		ax
   236 00000144 9D                          popf
   237 00000145 5D                          pop		bp
   238 00000146 C20600                      ret     6
   239                                  
   240                                  segment data
   241                                  ; mensagens de status
   242 00000000 566F6365206A61206A-         jogada_dupla            db      'Voce ja jogou, vez do jogador '
   243 00000009 6F676F752C2076657A-
   244 00000012 20646F206A6F676164-
   245 0000001B 6F7220             
   246                                      len_jogada_dupla        equ      30
   247 0000001E 4A6F6761646F722069-         jogador_invalido        db      'Jogador invalido!'
   248 00000027 6E76616C69646F21   
   249                                      len_jogador_invalido    equ      17
   250 0000002F 506F736963616F2069-         posicao_invalida        db      'Posicao invalida!'
   251 00000038 6E76616C69646121   
   252                                      len_posicao_invalida    equ      17
   253 00000040 506F736963616F206A-         posicao_preenchida      db      'Posicao ja preenchida!'
   254 00000049 6120707265656E6368-
   255 00000052 69646121           
   256                                      len_posicao_preenchida  equ      22
   257 00000056 456D7061746521              msg_empate              db      'Empate!'
   258                                      len_msg_empate          equ      7
   259                                  
   260                                  
   261                                  segment stack stack
   262 00000000 <res 00000200>              resb 512
   263                                  stacktop:
